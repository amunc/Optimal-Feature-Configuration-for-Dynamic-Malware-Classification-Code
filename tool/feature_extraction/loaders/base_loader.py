from ..processor import BaseProcessor
from ...utils.file_search import get_matching_files
import abc

class BaseLoader(BaseProcessor):
    '''
    Base class for loaders to abstract some functionality
    '''
    def __init__(self, pattern):
        self.pattern = pattern

    def generate_path(self, directory):
        return get_matching_files(directory, self.pattern)

    def process(self, directory):
        path = self.generate_path(directory)
        return self.load_data(path)

    @abc.abstractmethod
    def load_data(self, path):
        return NotImplemented

class SingleFileLoader(BaseLoader):
    '''
    A class for loaders that only expect a single file
    '''
    def generate_path(self, directory):
        matches = BaseLoader.generate_path(self, directory)
        if len(matches) > 1:
            raise ValueError(
                "There are several matches for '{}' in directory {}".format(
                    self.pattern, directory)
            )
        elif not matches:
            raise ValueError(
                "No matching files for '{}' in directory {}".format(
                    self.pattern, directory)
            )
        return matches[0]
