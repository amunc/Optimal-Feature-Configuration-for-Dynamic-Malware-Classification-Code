# -*- coding: utf-8 -*-
"""
Created on Tue Jul  7 12:19:49 2020

@author: David
"""
import itertools
from functools import reduce
import numpy as np


def empty_count_dict(sequence):
    return dict.fromkeys(np.unique(sequence), 0)


def empty_key_product_dict(sequence, n=2):
    return dict.fromkeys(itertools.product(np.unique(sequence), repeat=n), 0)


def empty_individual_and_product_dict(sequence, n):
    dictionary = empty_count_dict(sequence)
    dictionary.update(empty_key_product_dict(sequence, n))
    return dictionary


def sum_dictionaries(dictionary_list):
    def add(acum, new):
        for key, value in new.items():
            acum[key] = acum.get(key, 0) + value
        return acum
    return reduce(add, dictionary_list, {})


def prefix_dict_keys(dictionary, prefix):
    '''
    Adds a prefix to the keys of a dictionary. The keys are expected to be
    string. If the keys are numeric, they will be increased instead.

    Arguments
    -------------------------
    dictionary: dict
        The dictionary whose keys will be replaced for the new.
    prefix: string or numeric.
        The prefix to be added to the keys. Must be of the same type as all
        of dictionary keys.

    Returns
    ---------------------
    prefixed: dict
        Dictionary with the same values but substituted keys.
    '''
    for key in list(dictionary):
        dictionary[prefix + key] = dictionary.pop(key)


def incremental_key_dict(key, data):
    '''
    Constructs a dictionary with values equal to the elements of data
    and keys equal to key with the index of the corresponding element appended.

    Example:
        data = [12, 4 ,5]
        key = 'data_number'

        returned: {'data_number0': 12, 'data_number1': 4, 'data_number2': 5}

    Arguments
    ---------------------------
    key: string
        Base name of the dictionary keys, will get appended the index of the
        element.
    data: iterable
        Values of the dictionary

    Returns
    -----------------------------
    dictionary: dict
        The constructed dictionary
    '''
    items = ((key + str(i), elem) for i, elem in enumerate(data))
    return dict(items)
