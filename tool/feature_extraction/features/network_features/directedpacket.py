# -*- coding: utf-8 -*-
"""
Created on Sun Jun 16 13:11:24 2019

@author: David
"""
import scapy.all


class DirectedPacket(object):
    '''
    Pretty much a proxy of scapy.packet.Packet, with a little extra.

    The source class attribute determines which is the source ip of the packets
    and assigns to each packet the forwards boolean instance attribute
    which indicates its direction. This is important because the extracted
    features distinguish between outgoing and incoming traffic.

    Class Attributes
    ----------------------------
    source: str
        The source IP to determine the direction of the packet

    Instance Attributes
    -----------------------------
    packet: scapy.packet.Packet. The original packet
    forwards: boolean
        Whether the packet is incoming or outgoing according to source
    '''
    source = ''

    def __init__(self, packet, forwards):
        self.packet = packet
        self.forwards = forwards

    def __getattr__(self, attr_name):
        return getattr(self.packet, attr_name)

    def __getitem__(self, index):
        return self.packet.__getitem__(index)

    def __contains__(self, element):
        return self.packet.__contains__(element)

    def __str__(self):
        return self.packet.__str__()

    def __repr__(self):
        return self.packet.__repr__()

    @classmethod
    def change_source(cls, source):
        '''
        Changes the source class attribute
        '''
        DirectedPacket.source = source

    def construct_key(self):
        '''
        Assigns a key to the packet according to its source and destination
        IP addresses and ports and its protocol.

        Mainly used to assign a packet to a flow when processing flows.

        The key is generated so that two packets in opposite directions
        have the same key. This is done putting the attribute corresponding to
        the source class attribute first.

        Example:
            source = '192.145.12.34'
            packet: '123.12.12.12':45 ---> '192.145.12.34': 6745 proto: 6
            key = ('192.145.12.34', '123.12.12.12', 6745, 45, 6)

        So, the IP of the source goes before the other, and the same with port.

        Returns
        -------------------------------
        key: tuple(<str>, <str>, <int>, <int>, <int>).
            The first two fields are IP addresses, the next two the port
            numbers and the last the proto field of the IP header.

        '''
        ip_tuple = (self['IP'].src, self['IP'].dst)
        # ip_proto = self['IP'].proto
        port_tuple = tuple()
        if scapy.all.TCP in self or scapy.all.UDP in self:
            #transport_layer = self['IP'].payload
            #port_tuple = (transport_layer.sport, transport_layer.dport)
            port_tuple = (self.sport, self.dport)
        elif scapy.all.UDPerror in self or scapy.all.TCPerror in self:
            port_tuple = (self.dport, self.sport)
        if self.forwards:
            key = ip_tuple + port_tuple
        else:
            key = ip_tuple[::-1] + port_tuple[::-1]

        # key += (ip_proto, )
        return key
