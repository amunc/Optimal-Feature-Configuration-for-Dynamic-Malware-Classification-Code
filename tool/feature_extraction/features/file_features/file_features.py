# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 09:01:19 2019

@author: David
"""
import re
try:
    from functools import reduce
except ImportError:
    pass
import operator
import numpy as np
from ..utils.dictionary import incremental_key_dict


def default_paths():
    '''
    Returns a list with regular expressions for default paths used in
    Aziz Mohaisen, Omar Alrawi, Manar Mohaisen, AMAL: High-fidelity,
    behavior-based automated malware analysis and classification,
    Computers & Security, Volume 52, 2015.
    '''
    # Any drive letter will match just in case
    paths = [
     r'[A-Z]:\\Users\\.+\\AppData\\Roaming',  # %APPDATA%
     r'[A-Z]:\\Users\\.+\\AppData\\Local\\Temp',  # %TEMP%
     r'[A-Z]:\\Program Files',  # %PROGRAMFILES%
     r'[A-Z]:\\ProgramFiles',
     r'[A-Z]:\\Program Files(x86)'
     ]
    return paths + [path.lower() for path in paths]


def get_file_counts(json_data):
    '''
    Get the counts of files created, read, written and deleted.

    The keys of the returned dictionary are:
        'read_files', 'written_files', 'created_files', 'deleted_files'

    Arguments
    -----------------------
    json_data: dict.
        Data of the JSON report of Cuckoo

    Returns
    ---------------------------
    counts: dict
        Dictionary with the counts
    '''
    counts = {}
    summary = json_data['behavior']['summary']

    counts['read_files'] = len(summary['read_files'])
    try:
        counts['created_files'] = len(json_data['dropped'])
    except KeyError:
        counts['created_files'] = 0
    counts['written_files'] = len(summary['write_files'])
    counts['deleted_files'] = len(summary['delete_files'])
    counts['accessed_files'] = len(summary['files'])

    return counts


def file_contains_path(file_path, subpath):
    '''
    Checks whether a file path contains a subpath

    Arguments
    ---------------------------
    file_path: string
        Path of the file
    subpath: string
        Subpath to check for.

    Returns
    --------------------------
    contained: bool
        True if subpath is contained within file_path. False otherwise
    '''
    return bool(re.search(subpath, file_path))


def file_contains_default_path(file_path):
    '''
    Checks whether a file path contains any of the default paths in
    default_paths()

    Arguments
    ---------------------------
    file_path: string
        Path of the file

    Returns
    --------------------------
    contained: bool
        True if file_path contains any of the default paths. False otherwise.
    '''
    paths = default_paths()
    return reduce(
        operator.__or__,
        map(lambda x: file_contains_path(file_path, x), paths),
        False
    )


def file_paths_contain_default_path(file_paths):
    '''
    Checks whether any element of an iterable of file paths contains any of
    the default paths in default_paths()

    Arguments
    ---------------------------
    file_paths: iterable<string>
        Iterable which contains file paths in string form.

    Returns
    --------------------------
    contained: bool
        True if any element of file_paths contains any of the default paths.
        False otherwise.
    '''
    return reduce(
        operator.__or__,
        map(lambda x: file_contains_default_path(x), file_paths),
        False
    )


def get_created_file_counts_in_paths(json_data):
    '''
    Counts the number of files created in predefined paths

    Arguments
    -----------------------
    json_data: dict.
        Data of the JSON report of Cuckoo

    Returns
    --------------------------
    count: int
        The number of files created in predefined paths
    '''
    count = 0
    try:
        dropped_files = json_data['dropped']
    except KeyError:
        return 0
    for dropped in dropped_files:
        try:
            file_paths = dropped['filepath']
        except KeyError:   # We don't know the path
            continue
        #count += file_paths_contain_default_path(file_paths)
        count += file_contains_default_path(file_paths)

    return count


def extract_extension(file_name):
    '''
    Retruns the extension of a file. If the file has no extension, returns
    the file name.

    Arguments
    ---------------------------------
    file_name: string
        Name of the file

    Returns
    ---------------------------------
    extension: string
        Extension of the file
    '''
    return file_name.rpartition('.')[-1]


def different_extension_counts(json_data):
    '''
    Counts the number of different extensions in created files

    Arguments
    ----------------------------
    json_data: dict.
        Data of the JSON report of Cuckoo

    Returns
    --------------------------------
    count: int
        Number of different extensions in created files
    '''
    try:
        names = (dropped_file['name'] for dropped_file in json_data['dropped'])
    except KeyError:
        return 0
    return len(set(map(lambda x: extract_extension(x), names)))


def created_file_sizes_histogram(json_data):
    '''
    Creates a histogram with the created file sizes, using quartiles as
    edges for the bins.

    Therefore, the first bin is between the min value and first quartile;
    the second between the first quartile and the second and so on.

    Arguments
    ----------------------------
    json_data: dict.
        Data of the JSON report of Cuckoo

    Returns
    --------------------------------
    counts: numpy.ndarray
        Count of elements for each bin
    '''
    try:
        sizes = [dropped['size'] for dropped in json_data['dropped']]
    except KeyError:
        sizes = []
    try:
        # edges = [np.quantile(sizes, quantile)
        #         for quantile in np.arange(1.01, step=0.25)]
        edges = [np.percentile(sizes, quantile)
                 for quantile in np.arange(101, step=25)]
    except IndexError:  # No dropped files
        return np.array([0, 0, 0, 0])
    return np.histogram(sizes, bins=edges)[0]


def created_processes_from_files(json_data):
    '''
    Obtains the number of created processes in a Cuckoo Json report

    Arguments
    -------------------------
    json_data: dict
        Data of the JSON report of Cuckoo

    Returns
    ---------------------------------
    num_processes_created: int
        The number of processes created
    '''
    dropped_paths = set()
    try:
        drop = json_data['dropped']
    except KeyError:
        return 0
    for dropped in drop:
        # dropped_paths.update(dropped['guest_paths'])
        try:
            dropped_paths.add(dropped['filepath'])
        except KeyError:
            continue
    processes_paths = [d['process_path'] for d
                       in json_data['behavior']['processes']]
    count = 0
    for process_path in processes_paths:
        count += process_path in dropped_paths

    return count


def extract_file_features(json_data):
    '''
    Returns the file features extracted from the cuckoo JSON report

    Arguments
    ---------------------------
    json_data: dict
        Data of the JSON report of Cuckoo

    Returns
    ---------------------------
    results: dict
        Dictionary with the extracted features
    '''
    counts = get_file_counts(json_data)
    count_in_default_paths = get_created_file_counts_in_paths(json_data)
    count_different_extensions = different_extension_counts(json_data)
    file_sizes_histogram = created_file_sizes_histogram(json_data)

    results = {}
    results.update(counts)
    results['count_in_default_paths'] = count_in_default_paths
    results['count_different_extension'] = count_different_extensions
    results['processes_created_from_files'] = created_processes_from_files(
            json_data
    )
    results.update(
            incremental_key_dict('file_sizes_bin', file_sizes_histogram)
    )

    return results
