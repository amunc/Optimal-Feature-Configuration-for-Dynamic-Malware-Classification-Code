# -*- coding: utf-8 -*-
"""
Created on Mon Jul 27 08:25:43 2020

@author: David
"""

import os
from ..utils.settings import load_object, load_object_with_params
import logging
import gc
from .processor import IteratorResult, ProcessingStep

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


def construct_steps(scheme, result=[]):
    if not scheme:
        return None
    for line in scheme:
        s = ProcessingStep(load_object_with_params(line))
        result.append(s)
        construct_steps(line.get("next", []), s.next_steps)
    return result


def change_relative_paths_in_scheme(scheme, prefix):
    if not scheme:
        return
    for line in scheme:
        #args = line.get("args", tuple())
        #args = [os.path.join(prefix, x) if not os.path.dirname(x) else x
        #        for x in args]
        kwargs = line.get("kwargs", {})
        for key, value in kwargs.items():
            # if value in to_change:
            if key == "file" and not os.path.dirname(value):
                kwargs[key] = os.path.join(prefix, value)
        #change_relative_paths_in_scheme(
        #    line.get("next", []), to_change, prefix)
        change_relative_paths_in_scheme(line.get("next", []), prefix)


class ExtractionManager:
    def __init__(self, config):
        self.base_path = config["BASE_DATA_PATH"]
        self.scheme = config["EXTRACTION_SCHEME"]
        self.init_args = config.get("INIT_ARGS", tuple())
        self.config = config
        self.init_kwargs = config.get("INIT_KWARGS", {})
        # self.paths_to_change = config.get("RELATIVE_FEATURE_OUTPUT_PATHS", [])
        self.output_path = config["FEATURE_OUTPUT_PATH"]
        obj = config.get("FEATURE_POSTPROCESSING", None)
        if obj:
            self.postprocessing = load_object(obj.get("name"))
            self.postprocessing_args = obj.get("args", tuple())
            self.postprocessing_kwargs = obj.get("kwargs", {})

    def extract(self):
        change_relative_paths_in_scheme(self.scheme, # self.paths_to_change,
                                        self.output_path)
        logger.info("Initializing processing steps")
        processing_steps = construct_steps(self.scheme)
        logger.info("Starting processing: ")
        for step in processing_steps:
            step.process(*self.init_args, **self.init_kwargs)
        logger.info("Starting postprocessing: ")
        if self.postprocessing:
            self.postprocessing(self.config, *self.postprocessing_args,
                                **self.postprocessing_kwargs)


def feature_extraction(config):
    em = ExtractionManager(config)
    em.extract()
