# -*- coding: utf-8 -*-
"""
Created on Thu Jul  9 12:21:15 2020

@author: David
"""
import itertools
import pandas as pd
import os
from ...utils.file_search import extract_directory_elements


def extract_possible_combinations(iterable, min_size=2):
    '''
    Returns all possible combinations of length greater than one
    of the elements of iterable

    Arguments
    --------------------------
    iterable: iterable
        an iterable with elements
    combinations: chain
        iterable whose elements are tuples which are combinations of elements
        of iterable
    '''
    lengths = range(min_size, len(iterable) + 1)
    return itertools.chain(
            *map(lambda x: itertools.combinations(iterable, x), lengths)
    )


def merge_datasets_on_columns(file_list, how_join='inner',
                              columns=['Sha1']):
    '''
    Create new datasets from combinations of unique feature sets
    using union of fields.

    Arguments
    ------------------------
    file_list: iterable<str>
        Iterable which contains paths of csv files to merge
    how_join: str in {'left', 'right', 'inner', 'outer'}
        How to make the join
    columns: iterable<str>
        The columns on which to join

    Returns
    -----------------------
    merged: pandas.DataFrame
        The merged dataframe
    '''
    # df = pd.DataFrame(columns=columns)  #Necessary for the join
    fl = list(file_list)
    right_index = left_index = not columns
    df = pd.read_csv(fl.pop(0), header=0, sep=',')
    for f in fl:
        df = df.merge(
                pd.read_csv(f, header=0, sep=','), how=how_join, on=columns,
                right_index=right_index, left_index=left_index
        )
    return df


def mix_datasets(file_list, columns=None, target_dir=None, min_size=2,
                 to_combine_later=[]):
    '''
    Create new datasets from combinations of unique feature sets
    using union of fields on columns

    Creates all possible combinations of datasets:
        example: {'file', 'cuckoo', 'network'}
        creates: {'file_cuckoo', 'file_network', 'cuckoo_network',
                  'file_cuckoo_network'}

    Only catches files with names equal to keys of features_dict()

    Arguments
    ----------------------------
    directory: str
        Path of directory which contains the feature_sets in csv format
    '''
    tuples = list(extract_possible_combinations(file_list, min_size))
    if not target_dir:
        target_dir = os.path.dirname(file_list[0])
    new_files = []
    for tup in tuples:
        merged = merge_datasets_on_columns(tup + tuple(to_combine_later),
                                           columns=columns)
        file_names = map(
                lambda x: os.path.basename(x).rpartition('.')[0], tup
        )
        output_file_name = os.path.join(
                target_dir, '_'.join(file_names) + '.csv'
        )
        new_files.append(output_file_name)
        merged.to_csv(output_file_name, index=False, header=True, sep=',')
    return new_files


def set_config(config, new_files):
    config["MODEL_GENERATION_FILES_TO_LOAD"] = new_files
    per_data_set_params = {}
    for f in new_files:
        per_data_set_params[f] = {
            "fit_params": {
                "dataset_name": os.path.basename(f).split(".")[0]
            },
            "classifier_params": {
                "time_left_for_this_task": 60 * 10        
            }
        }


def combine(config, min_size=2, merge_columns=None, output_path=None,
            to_combine_later=[]):
    base_dir = config.get("FEATURE_OUTPUT_PATH")
    to_combine_later = [os.path.join(base_dir, p) if not os.path.isabs(p) else p
                        for p in to_combine_later]
    file_list = [p for p in extract_directory_elements(base_dir, files=True)
                 if p not in to_combine_later]
    new_files = mix_datasets(file_list, merge_columns, output_path, min_size,
                             to_combine_later)
    set_config(config, new_files)
