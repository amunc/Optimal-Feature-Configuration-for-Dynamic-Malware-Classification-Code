import inspect
import numpy as np

def unequal_lengths(*args):
    '''
    Checks whether the lengths of all elements in args are the same
    '''
    lens = list(map(len, args))
    # return len(set(map(len, args))) > 1
    return not lens or lens.count(lens[0]) != len(lens)

def reduce_to_shortest(*args):
    '''
    Receive a set of array-likes and return a random sample of each with
    size equal to the minimum size among the arguments
    '''
    n = min(map(len, args))
    return [np.random.choice(arg, size=n, replace=False) for arg in args]


def function_only_has_var_positional_args(func):
    signature = inspect.signature(func)
    for name, parameter in signature.parameters.items():
        if parameter.kind != inspect.Parameter.VAR_POSITIONAL:
            return False
    return True


def check_input_lengths_decorator(func):
    '''
    Decorator to decorate function
    '''
    if not function_only_has_var_positional_args(func):
        raise ValueError(
            "wrapped function must only accept variable postional args")
    def new_func(*args):
        if unequal_lengths(*args):
            return func(*reduce_to_shortest(*args))
        return func(*args)
    return new_func