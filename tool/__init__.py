# -*- coding: utf-8 -*-
"""
Created on Tue Jul  7 11:18:23 2020

@author: David
"""
# import logging

# def filter_func(log_record):
# 	return log_record.name.startswith("tool")


# logger = logging.getLogger()
# logger.setLevel(logging.DEBUG)
# # If attached to a logger, it will only have access to
# # the messages logged by that particular logger
# # whereas it attached to a handler, it will
# # access all messages from the handler before they are
# # emitted, therefore it will potentially catch messages from
# # child loggers
# # logger.addFilter(filter_func)

# all_h = logging.StreamHandler()
# all_h.setLevel(logging.DEBUG)
# basic_formatter = logging.Formatter("[%(asctime)s]: %(levelname)s %(message)s", datefmt="%d-%m-%Y %H:%M:%S")
# all_h.setFormatter(basic_formatter)
# logger.addHandler(all_h)

# error_logger = logging.FileHandler("error_log.txt", mode='w')
# error_formatter = logging.Formatter("[%(asctime)s]: %(name)s %(levelname)s %(message)s", datefmt="%d-%m-%Y %H:%M:%S")
# error_logger.setFormatter(error_formatter)
# error_logger.setLevel(logging.ERROR)
# logger.addHandler(error_logger)

# dup_logger = logging.FileHandler("full_log.txt", mode='w')
# dup_logger.setFormatter(error_formatter)
# dup_logger.setLevel(logging.DEBUG)
# dup_logger.addFilter(filter_func)
# logger.addHandler(dup_logger)

# #all_h.addFilter(filter_func)
# #error_logger.addFilter(filter_func)
# #dup_logger.addFilter(filter_func)