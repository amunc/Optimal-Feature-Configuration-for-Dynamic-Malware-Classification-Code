# -*- coding: utf-8 -*-
"""
Created on Tue Jul  7 08:51:47 2020

@author: David
"""
import importlib
from typing import Any, Mapping, Union, Iterable, Dict
from ..typing import Settings, ObjectPath, LoadInfoDict, ModulePath
import types


def load_module(module_path: ModulePath) -> types.ModuleType:
    '''
    Loads a python module given its path.

    Arguments
    ---------
    module_path: ObjectPath
        A module name in dot notation

    Returns
    -------
    ModuleType:
        The loaded module
    '''
    return importlib.import_module(module_path)


def load_object(python_path: ObjectPath) -> Any:
    '''
    Loads a python object from a module.

    python_path is a string object with the format ''<module>.name''
    This function loads the module and gets the name from it, so the module
    must be specified with the dot syntax

    Arguments
    ---------
    python_path: PythonPath
        the object path

    Returns
    -------
    object: Any
        The object in the module
    '''
    module, name = python_path.rsplit(".", 1)
    module_object = load_module(module)
    return getattr(module_object, name)


def load_object_with_params(info_dict: LoadInfoDict) -> Any:
    '''
    Loads an object and calls it with the parameters specified.

    info_dict must be a mapping with the key "name", which contains the path as
    specified in the load_object function.

    The mapping may optionally contain "args" and "kwargs" keys, which will be
    passed to the call of the object and must be respectively an iterable and a
    mapping.

    Any other key, if any, will be ignored.

    Arguments
    ---------
    info_dict: LoadInfoDict
        Mapping with the specified format

    Returns
    -------
    object: Any
        The result of calling the object with the optionally specified
        paramameters
    '''
    cls = load_object(info_dict["name"])
    args = info_dict.get("args", tuple())
    kwargs = info_dict.get("kwargs", {})
    return cls(*args, **kwargs)


def load_module_as_dict(python_path: ModulePath) -> Dict[str, Any]:
    '''
    Loads a python module and returns a mapping which contains all objects
    defined in the module whose names are all caps

    Arguments
    ---------
    python_path: ObjectPath
        A module name in dot notation

    Returns
    -------
    dictionary: Dict
        A dictionary with the specified module attributes
    '''
    module = load_module(python_path)
    dictionary = {}
    for key in dir(module):
        if key.isupper():
            dictionary[key] = getattr(module, key)
    return dictionary


def load_default_settings() -> Settings:
    '''
    Loads the default settings
    '''
    return load_module_as_dict("tool.defaults.settings")


def load_user_settings() -> Settings:
    '''
    Loads the user settings
    '''
    return load_module_as_dict("tool.settings")
