from collections import abc
import numpy as np
from typing import Any, Sized


def is_iterable(obj: Any, exclude_tuples: bool = False,
                exclude_sets: bool = False, exclude_dicts: bool = False
                ) -> bool:
    '''
    Checks whether and object is iterable. This boils down to checking
    whether the object defines an __iter__ method and is not a string or bytes.

    string and bytes are iterables, but usually you want to exclude them

    Arguments
    ---------
    obj: object
        The object to test
    exclude_tuples: Bool
        If True, tuples will not be considered iterables
    exclude_sets: Bool
        If True, sets will not be considered iterables

    Returns
    -------
    True or False
    '''
    return (
        isinstance(obj, abc.Iterable)
        and not isinstance(obj, (str, bytes))
        and not (exclude_tuples and isinstance(obj, tuple))
        and not (exclude_dicts and isinstance(obj, dict))
        and not (exclude_sets and isinstance(obj, set))
    )


def sized_sequence_and_not_string(obj: Any) -> bool:
    '''
    Checks whether the passed object:
        - is not a string or bytes
        - has a size
        - the size is greater than zero
    Arguments
    ---------
    obj: Any
        The object to check

    Return
    ------
    True or False
    '''
    return (
            is_iterable(obj, exclude_sets=True, exclude_dicts=True)
            #and len(obj) > 0
    )


def is_list(obj: Any) -> bool:
    '''
    Checks whether the object is a list (or a numpy array)

    Arguments
    ---------
    obj: object
        The object to check

    Returns
    -------
    True or False
    '''
    return isinstance(obj, (list, np.ndarray))
