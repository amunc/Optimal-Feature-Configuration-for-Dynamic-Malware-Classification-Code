# -*- coding: utf-8 -*-
"""
Created on Mon Jul  6 10:39:07 2020

@author: David
"""
import os
import re
import pathlib
import shutil

from typing import Generator, Union, Iterable, List
from .general import is_iterable

def extract_directory_elements(directory: str,
                               files: bool = False
                               ) -> Generator[str, None, None]:
    '''
    Returns the names of directories or files contained within a directory.

    Arguments
    ---------
    directory: string
        Path of the directory whose elements will be extracted.

    files: bool
        If True, return file paths, otherwise return directories

    Returns
    -------
    Generator[str] with file paths
    '''
    filter_func = os.path.isfile if files else os.path.isdir
    for path in filter(filter_func, get_full_paths_of_files(directory)):
        yield path


def get_matching_files(directory: str, pattern: str) -> List[str]:
    '''
    Returns all files in a directory that match pattern.

    Parameters
    ----------
    directory: str
        The path to the directory to search in
    pattern: str
        A regular expression to match files

    Returns
    -------
    matches: List[str]
        A List with all the files fund that match the pattern
    '''
    p = pathlib.Path(directory)
    matches = []
    for file_path in p.iterdir():
        if re.match(pattern, file_path.parts[-1]):
            matches.append(str(file_path))
    return matches


def get_first_file_by_extension(directory: str, extension: str) -> str:
    '''
    Returns the first file with the extension within the directory.

    Arguments
    ---------
    directory: string
        Path of the directory whose elements will be inspected.

    extension: string
        Extension of the file.

    Returns
    -------
    file: string
        Path of the first file with a matching extension
    '''
    for f in extract_directory_elements(directory, files=True):
        if re.search(r'%s$' % extension, f):
            return f


def get_full_paths_of_files(directory: str) -> Generator[str, None, None]:
    '''
    A generator which produces the full paths of all files contained in
    directory.

    Arguments
    ---------
    directory: str
        The directory to search

    Returns
    -------
    Generator[str] with the file paths
    '''
    for path in pathlib.Path(directory).iterdir():
        yield str(path)


def _empty_directory(directory: str) -> None:
    '''
    Deletes contents of the path specified by directory

    Arguments
    ---------
    directory: str
        The path of the directory to empty
    '''
    for name in get_full_paths_of_files(directory):
        if os.path.isfile(name):
            os.unlink(name)
        elif os.path.isdir(name):
            shutil.rmtree(name)


def empty_directory(directory: Union[str, Iterable[str]]) -> None:
    '''
    Calls _empty_directory on a single path or several

    Arguments
    ---------
    directory: Union[str, Iterable[str]]
        The path or paths to be emptied
    '''
    if is_iterable(directory):
        for d in directory:
            _empty_directory(d)
    else:
        _empty_directory(directory)


def create_directory(path: str) -> None:
    '''
    Recursively creates a directory. If it exists, does nothing.

    Arguments
    ---------
    path: str
        The path of the directory to create
    '''
    pathlib.Path(path).mkdir(parents=True, exist_ok=True)

