# -*- coding: utf-8 -*-
"""
Created on Fri Sep  4 13:38:22 2020

@author: David
"""
import unittest
import unittest.mock
from tool.model_generation.data_loaders.csv_loader import (
    CSVLoader, CSVSplitLoader
)

def self_returning_mock(*args, **kwargs):
    m = unittest.mock.MagicMock(*args, **kwargs)
    m.return_value = m
    return m


@unittest.mock.patch("pandas.read_csv", new_callable=self_returning_mock)
class TestCSVLoader(unittest.TestCase):
    def test_CSVLoader(self, patched):
        args = (1, 2, 3, 4)
        kwargs = {"tupleize_cols": "sasa", "usecols": [1, 2, 3, 4]}
        file = "whatever.csv"
        loader = CSVLoader(*args, **kwargs)
        result = loader.load(file)
        result.assert_called_once_with(file, *args, **kwargs)


@unittest.mock.patch(
    "tool.model_generation.data_loaders.csv_loader.split_dataframe_by_columns_to_numpy",
    new_callable=self_returning_mock)
@unittest.mock.patch.object(CSVLoader, "load",
                            new_callable=self_returning_mock)
class TestCSVSplitLoader(unittest.TestCase):
    def test_CSVSplitLoader(self, read_mock, split_mock):
        args = (1, 2, 3, 4)
        target_column = "asdf"
        file = "whatever.csv"
        columns_to_discard = ["one"]
        kwargs = {"a": "sasa", "b": [1, 2, 3, 4]}
        loader = CSVSplitLoader(*args, target_column=target_column,
                                columns_to_discard=columns_to_discard,
                                **kwargs)
        result = loader.load(file)
        read_mock.assert_called_once_with(loader, file)
        split_mock.assert_called_once_with(read_mock, target_column)
