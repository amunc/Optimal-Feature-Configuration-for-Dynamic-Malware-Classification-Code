# -*- coding: utf-8 -*-
"""
Created on Fri Sep  4 09:53:15 2020

@author: David
"""
import unittest
import pandas as pd
import numpy as np
import operator
from tool.model_generation.utils.dataframe import (
    split_dataframe_by_columns, split_dataframe_by_columns_to_numpy
)
from tool.utils.parameterize_utils import RepeatingTestCase

class TestDataframe(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        unittest.TestCase.__init__(self, *args, **kwargs)
        # Custom equality function for dataframes and numpy arrays
        def dataframe_equality(a, b, msg=None):
            print("dataframe equality: a, b", a ,b, not np.all(a == b))
            if not np.all(a == b):
                raise self.failureException(
                    "{} Dataframes are not equal".format(msg if msg else ""))
            return True
        self.comparison = dataframe_equality

    def assertElementwiseEqual(self, iterable_a, iterable_b, msg=None):
        for a, b in zip(iterable_a, iterable_b):
            #self.assertEqual(a, b, msg=msg)
            np.testing.assert_array_almost_equal(a, b)

    def setUp(self):
        self.columns = ["a", "b", "c"]
        self.data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        self.df = pd.DataFrame(self.data, columns=self.columns)

        # Apply to current test only
        # gave problems
        #self.addTypeEqualityFunc(pd.core.frame.DataFrame, self.comparison)
        #self.addTypeEqualityFunc(np.ndarray, self.comparison)

    def test_split_dataframe_by_columns_multiple(self):
        args = [self.df, self.columns[:-1]]
        expected = (self.df[self.columns[-1:]], self.df[self.columns[:-1]])
        self.assertElementwiseEqual(
            split_dataframe_by_columns(*args), expected)

    def test_split_dataframe_by_columns_single_column(self):
        args = [self.df, self.columns[0]]
        expected = (self.df[self.columns[1:]], self.df[self.columns[0]])
        self.assertElementwiseEqual(
            split_dataframe_by_columns(*args), expected)

    def test_split_dataframe_by_columns_to_numpy(self):
        args = [self.df, self.columns[0]]
        expected = (self.df[self.columns[1:]], self.df[self.columns[0]])
        with unittest.mock.patch(
            "tool.model_generation.utils.dataframe.split_dataframe_by_columns"
            ) as m:
            m.return_value = expected
            self.assertElementwiseEqual(
                split_dataframe_by_columns_to_numpy(*args),
                map(operator.attrgetter("values"), m.return_value))

