import unittest
import unittest.mock
import pathlib
import shutil

from tool.feature_extraction.path_generators.subdirectories import (
    SubdirectoryPathGenerator
)

class TestPathGenerator(unittest.TestCase):
    def setUp(self):
        self.base = pathlib.Path("base_dir")
        self.empty = self.base / "empty_dir"
        self.non_empty = self.base / "non_empty"
        self.duplicate_dir = self.base / "duplicates"
        self.duplicate_json1 = self.duplicate_dir / "a1.json"
        self.duplicate_json2 = self.duplicate_dir / "a2.json"
        self.duplicate_pcap1= self.duplicate_dir / "a1.pcap"
        self.duplicate_pcap2 = self.duplicate_dir / "a2.pcap"
        self.json_file = self.non_empty / "report.json"
        self.pcap_file = self.non_empty / "trace.pcap"

        self.empty.mkdir(parents=True, exist_ok=True)
        self.non_empty.mkdir(parents=True, exist_ok=True)
        self.duplicate_dir.mkdir(parents=True, exist_ok=True)

        self.duplicate_json1.touch(exist_ok=True)
        self.duplicate_json2.touch(exist_ok=True)

        self.duplicate_pcap1.touch(exist_ok=True)
        self.duplicate_pcap2.touch(exist_ok=True)

        self.json_file.touch(exist_ok=True)
        self.pcap_file.touch(exist_ok=True)

    def tearDown(self):
        shutil.rmtree(self.base)

    def test_process(self):
        p = SubdirectoryPathGenerator(self.base)
        self.assertEqual(
            set(p.process()),
            {str(self.empty), str(self.non_empty), str(self.duplicate_dir)})

    def test_process_error(self):
        p = SubdirectoryPathGenerator("does not exist")
        with self.assertRaises(FileNotFoundError):
            list(p.process())