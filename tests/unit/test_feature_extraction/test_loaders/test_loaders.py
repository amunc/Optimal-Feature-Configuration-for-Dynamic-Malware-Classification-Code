import unittest
import unittest.mock
from tool.feature_extraction.loaders.json_loader import JsonLoader
from tool.feature_extraction.loaders.pcap_loader import PcapLoader
from tool.feature_extraction.loaders.base_loader import (
    BaseLoader, SingleFileLoader
)
import pathlib
import shutil
import functools

class TestLoader(unittest.TestCase):
    def setUp(self):
        self.base = pathlib.Path("base_dir")
        self.empty = self.base / "empty_dir"
        self.non_empty = self.base / "non_empty"
        self.duplicate_dir = self.base / "duplicates"
        self.duplicate_json1 = self.duplicate_dir / "a1.json"
        self.duplicate_json2 = self.duplicate_dir / "a2.json"
        self.duplicate_pcap1= self.duplicate_dir / "a1.pcap"
        self.duplicate_pcap2 = self.duplicate_dir / "a2.pcap"
        self.json_file = self.non_empty / "report.json"
        self.pcap_file = self.non_empty / "trace.pcap"

        self.empty.mkdir(parents=True, exist_ok=True)
        self.non_empty.mkdir(parents=True, exist_ok=True)
        self.duplicate_dir.mkdir(parents=True, exist_ok=True)

        self.duplicate_json1.touch(exist_ok=True)
        self.duplicate_json2.touch(exist_ok=True)

        self.duplicate_pcap1.touch(exist_ok=True)
        self.duplicate_pcap2.touch(exist_ok=True)

        self.json_file.touch(exist_ok=True)
        self.pcap_file.touch(exist_ok=True)

        self.pattern = r".+\.json"
        self.pattern_pcap = r".+\.pcap"
        # Mock that complies withthe specification of a BaseLoader
        self.mock_instance = unittest.mock.MagicMock(set_spec=BaseLoader)
        self.mock_instance.pattern = self.pattern

    def tearDown(self):
        shutil.rmtree(self.base)


@unittest.mock.patch(
    "tool.feature_extraction.loaders.base_loader.get_matching_files")
class TestBaseLoader(TestLoader):
    def test_generate_path(self, patched):
        patched.return_value = ["123"]
        self.assertEqual(
            BaseLoader.generate_path(self.mock_instance, self.empty),
            patched.return_value)
        patched.assert_called_once_with(self.empty,
                                        self.mock_instance.pattern)

    def test_process(self, patched):
        patched.return_value = 123
        self.mock_instance.load_data.return_value = 1234
        self.mock_instance.generate_path.side_effect = (
            functools.partial(BaseLoader.generate_path, self.mock_instance)
        )

        res = BaseLoader.process(self.mock_instance, self.base)
        self.mock_instance.generate_path.assert_called_once_with(self.base)
        self.mock_instance.load_data.assert_called_once_with(
            patched.return_value)
        self.assertEqual(res, self.mock_instance.load_data.return_value)

@unittest.mock.patch(
    "tool.feature_extraction.loaders.base_loader.get_matching_files")
class TestSingleFileLoader(TestLoader):
    def test_generate_path(self, patched):
        patched.return_value = [123]
        p = SingleFileLoader.generate_path(self.mock_instance, self.base)
        patched.assert_called_once_with(self.base, self.mock_instance.pattern)
        self.assertEqual(p, 123)

    def test_generate_path_empty(self, patched):
        patched.return_value = []
        with self.assertRaises(ValueError):
            p = SingleFileLoader.generate_path(self.mock_instance, self.base)

    def test_generate_path_multiple(self, patched):
        patched.return_value = [1, 2]
        with self.assertRaises(ValueError):
            p = SingleFileLoader.generate_path(self.mock_instance, self.base)


class TestJsonLoader(TestLoader):
    def setUp(self):
        TestLoader.setUp(self)
        self.instance = JsonLoader(self.pattern)

    def test_load_error(self):
        with self.assertRaises(FileNotFoundError):
            self.instance.load_data("this does not exist")

    def test_load(self):
        with unittest.mock.patch("json.load") as m:
            m.return_value = 12
            res = self.instance.load_data(self.json_file)
            m.assert_called_once()
            self.assertEqual(res, m.return_value)

class TestPcapLoader(TestLoader):
    def setUp(self):
        TestLoader.setUp(self)
        self.instance = PcapLoader(self.pattern_pcap)

    def test_load_error(self):
        with self.assertRaises(FileNotFoundError):
            self.instance.load_data("this does not exist")

    def test_load(self):
        with unittest.mock.patch(
        "tool.feature_extraction.loaders.pcap_loader.filter_directed_packets"
        ) as m:
            m.return_value = 12
            res = self.instance.load_data(self.pcap_file)
            m.assert_called_once_with(self.pcap_file)
            self.assertEqual(res, m.return_value)