import unittest
import unittest.mock
from tool.statistics.tests.default import (
    normality_test, _friedman, _wilcoxon, _t_student
)
import numpy as np
from tool.utils.parameterize_utils import parameterize_directly

class TestStatisticalTests(unittest.TestCase):
    def setUp(self):
        self.pvalue_ref = 0.05

        self.min_len = 5
        self.greater_than_50 = np.random.random(51)
        self.small = np.random.random(self.min_len)
        self.different_length_arrays = [
            np.random.random(34), self.greater_than_50, self.small
        ]
        self.equal_values = [np.ones(10)] * 3

    @unittest.mock.patch("scipy.stats.kstest")
    @unittest.mock.patch("scipy.stats.shapiro")
    def test_normality_test_proper_calls(self, mock_shapiro, mock_kstest):
        normality_test(list(self.greater_than_50))
        mock_kstest.assert_called_once()
        (array, *_), kwargs = mock_kstest.call_args
        self.assertEqual(
            list(self.greater_than_50),
            array
        )

        normality_test(list(self.small))
        mock_shapiro.assert_called_once_with(list(self.small))

    def test_normality_equal_values(self):
        self.assertEqual(normality_test([1] * 80), 1.0)

    def test_friedman_equal_values(self):
        self.assertEqual(_friedman(*self.equal_values), 1.0)

    def test_wilcoxon_equal_values(self):
        self.assertEqual(_wilcoxon(*self.equal_values[:2]), 1.0)

    def test_tstudent_equal_values(self):
        self.assertEqual(_t_student(*self.equal_values[:2]), 1.0)

