# -*- coding: utf-8 -*-
"""
Created on Tue Sep  1 17:49:58 2020

@author: David
"""

import unittest
import unittest.mock
import itertools
from tool.utils.parameterize_utils import (
        parameterize, ParameterizedTestMeta, parameterize_directly, make_tuple,
        check_other_args, check_parameterized_args, has_self_parameter,
        is_method
)


class TestParameterize(unittest.TestCase):
    func_names = ["one", "two", "three"]
    vals = [(1, 3), (5, - 1), (0, 13)]
    class_func_name = "f"

    @staticmethod
    def mult(a, b):
        return a * b

    @staticmethod
    def add(a, b):
        return a + b

    def setUp(self):
        class Example(metaclass=ParameterizedTestMeta):
            @parameterize(
                    self.vals,
                    func_names=self.func_names
            )
            def f(self, a, b):
                return TestParameterize.mult(a, b)

            @parameterize_directly(
                    self.vals,
                    func_names=self.func_names
            )
            def g(self, a, b):
                return TestParameterize.add(a, b)

            def h(self):
                pass

        self.instance = Example()

    def tearDown(self):
        del self.instance

    def test_parameterize(self):
        for vals, name in zip(self.vals, self.func_names):
            with self.subTest(vals=vals):
                self.assertEqual(
                        self.mult(*vals),
                        getattr(self.instance, '_'.join(["f", name]))())

    def test_parameterize_directly(self):
        # The original method remains
        self.assertIsNone(getattr(self.instance, "g"))
        for vals, name in zip(self.vals, self.func_names):
            with self.subTest(vals=vals):
                self.assertEqual(
                        self.add(*vals),
                        getattr(self.instance, '_'.join(["g", name]))())

    def test_make_tuple(self):
        values = [
                ("asdf", ("asdf", )),
                ([1, 2, 3], [1, 2, 3]),
                (1, (1, ))
        ]
        for arg, expected in values:
            with self.subTest(arg=arg, expected=expected):
                self.assertEqual(expected, make_tuple(arg))

    def test_check_other_args(self):
        values = [
                (([1, 2, 3], 3), True),
                (("asdf", 4), False),
                (((1, 2, 3), 4), False),
                (([], 0), True)
        ]
        for arg, expected in values:
            with self.subTest(arg=arg, expected=expected):
                self.assertEqual(expected, check_other_args(*arg))

    def test_check_parameterized_args(self):
        values = [
            (([1, 2], ["a"], None),
            ([(1, ), (2, )], itertools.repeat(["a"], 2), ["0", "1"])),
            (([(1, ), (2, )], None, ["a", "b"]),
            ([(1, ), (2, )], itertools.repeat(None, 2), ["a", "b"])),
        ]
        for arg, expected in values:
            with self.subTest(arg=arg, expected=expected):
                self.assertEqual(
                        list(map(list, expected)),
                        list(map(list, check_parameterized_args(*arg)))
                )

    def test_check_parameterized_args_exception(self):
        values = [
            # args size does not match
            ([1, 2], ["a", "b"], None),
            # func_names does not match
            ([(1, ), (2, )], None, ["a", "b", "C"]),
            # values must be non-string
            ("dsf", ["a", "b"], None),
            # values must have non-zero size
            ([], ["a", "b"], None),
            # all elements of values must have size
            ([[], 3], ["a", "b"], None),
            # all elements must have same len
            ([[1, 2], [3]], ["a", "b"], None),
        ]
        for arg in values:
            with self.subTest(arg=arg):
                with self.assertRaises(ValueError, msg="arg: {}".format(arg)):
                    check_parameterized_args(*arg)

    def test_has_self_parameter(self):
        values = [
            (lambda self, a: a, True),
            (lambda x, self: x, False),
            (lambda x: x, False)
        ]
        for arg, expected in values:
            with self.subTest(arg=arg, expected=expected):
                self.assertEqual(
                    has_self_parameter(arg), expected
                )

    def test_has_self_parameter_raise(self):
        with self.assertRaises(TypeError):
            has_self_parameter(12)

    def test_is_method(self):
        values = [
            (lambda self, a: a, True, True),
            (lambda x, self: x, False, False),
            (lambda x: x, False, False),
            (self.instance.h, False, True),
            (getattr(self.instance, "f_one"), False, False)
        ]
        for i, (arg, patch, expected) in enumerate(values):
            with unittest.mock.patch(
                    "tool.utils.parameterize_utils.has_self_parameter",
                    lambda *args, **kwargs: patch):
                with self.subTest(arg=arg, expected=expected, i=i):
                    self.assertEqual(
                        is_method(arg), expected
                    )