# -*- coding: utf-8 -*-
"""
Created on Thu Sep  3 12:59:15 2020

@author: David
"""
import unittest
import unittest.mock
import itertools
from tool.utils.settings import (
    load_module, load_object, load_object_with_params, load_module_as_dict,
    load_default_settings, load_user_settings
)

class TestSettings(unittest.TestCase):
    def test_import_module(self):
        self.assertEqual(load_module("itertools"), itertools)

    def test_load_object(self):
        with unittest.mock.patch("tool.utils.settings.load_module") as m:
            m.return_value = itertools
            self.assertEqual(load_object("itertools.chain"), itertools.chain)

    def test_load_object_with_params(self):
        param_dict = {"name": "itertools.repeat", "args": (2, ),
                      "kwargs": {"times": 12}
                      }
        with unittest.mock.patch("tool.utils.settings.load_object") as m:
            m.return_value = itertools.repeat
            self.assertEqual(
                list(load_object_with_params(param_dict)),
                list(m.return_value(*param_dict["args"],
                                    **param_dict["kwargs"]))
            )

    def test_load_module_as_dict(self):
        class A:
            A = 12
            b = 13
            C = 14

        with unittest.mock.patch("tool.utils.settings.load_module") as m:
            m.return_value = A()
            self.assertEqual(load_module_as_dict("asdf"), {"A": A.A, "C": A.C})

    def test_load_default_settings(self):
        with unittest.mock.patch(
                "tool.utils.settings.load_module_as_dict") as m:
            load_default_settings()
            m.assert_called_once_with("tool.defaults.settings")

    def test_load_user_settings(self):
        with unittest.mock.patch(
                "tool.utils.settings.load_module_as_dict") as m:
            load_user_settings()
            m.assert_called_once_with("tool.settings")
