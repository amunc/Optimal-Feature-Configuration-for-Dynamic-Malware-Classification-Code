# -*- coding: utf-8 -*-
"""
Created on Tue Sep  1 10:55:52 2020

@author: David
"""

import unittest
import unittest.mock
import shutil
import pathlib
import os
from tool.utils.file_search import (
    extract_directory_elements, get_first_file_by_extension,
    get_full_paths_of_files, _empty_directory, empty_directory,
    create_directory, get_matching_files
)

BASE_DIR = "test_dir"


class TestFileSearch(unittest.TestCase):
    def setUp(self):
        self.base = pathlib.Path(BASE_DIR)
        self.inner1 = self.base / "contains_json"
        self.inner2 = self.base / "directory_and_json"
        self.inner2_inner = self.inner2 / "empty"
        self.inner2_text = self.inner2 / "text.json"
        self.inner1_text = self.inner1 / "text.json"
        self.to_create = self.base / "asdadasz" / "asfaasafa" / "asd"

        self.inner1.mkdir(parents=True, exist_ok=True)
        self.inner2.mkdir(parents=True, exist_ok=True)
        self.inner2_inner.mkdir(parents=True, exist_ok=True)
        self.inner2_text.touch(exist_ok=True)
        self.inner1_text.touch(exist_ok=True)

    def tearDown(self):
        shutil.rmtree(self.base)

    def test_matching_files(self):
        l = get_matching_files(self.inner2, self.inner2_text.parts[-1])
        self.assertEqual(l, [str(self.inner2_text)])

    def test_matching_files_empty(self):
        l = get_matching_files(self.base, self.inner2_text.parts[-1])
        self.assertEqual(l, [])

    def test_get_full_paths_of_files(self):
        values = [
                (self.inner2_inner, set()),
                (self.inner2, {str(self.inner2_inner), str(self.inner2_text)})
        ]
        for arg, expected in values:
            with self.subTest(arg=arg):
                self.assertSetEqual(
                        set(get_full_paths_of_files(arg)), expected)

    def test_get_full_paths_of_files_no_exist(self):
        with self.assertRaises(FileNotFoundError):
            list(get_full_paths_of_files("this_does_not_exist"))

    def test_extract_directory_elements(self):
        # Trying mocking to avoid dependencies
        cases = [
            ((self.inner2_inner, False), [], set()),
            ((self.inner2, True),
             [str(self.inner2_inner), str(self.inner2_text)],
             {str(self.inner2_text)}),
            ((self.base, False), [str(self.inner1), str(self.inner2)],
             {str(self.inner2), str(self.inner1)})
        ]
        for args, middle_output, expect in cases:
            with unittest.mock.patch(
                    "tool.utils.file_search.get_full_paths_of_files",
                    lambda x: middle_output):
                with self.subTest(dir=args[0]):
                    self.assertSetEqual(expect,
                                        set(extract_directory_elements(*args)))

    def test_extract_directory_elements_dir_no_exist(self):
        with self.assertRaises(FileNotFoundError):
            list(extract_directory_elements("this_does_not_exist"))

    def test_get_first_file_by_extension(self):
        cases = [
            ((self.inner2, "pcap"), [str(self.inner2_text)], None),
            ((self.inner2, "json"), [str(self.inner2_text)],
             str(self.inner2_text)),
            ((self.base, "txt"), [], None)
        ]
        for args, middle_output, expected in cases:
            with unittest.mock.patch(
                    "tool.utils.file_search.extract_directory_elements",
                    lambda x, **kwargs: middle_output):
                with self.subTest(args=args):
                    self.assertEqual(expected,
                                     get_first_file_by_extension(*args))

    def test__empty_directory_empty_dir(self):
        with unittest.mock.patch(
                "tool.utils.file_search.extract_directory_elements") as m:
            m.return_value = []
            _empty_directory(self.inner2_inner)
            self.assertEqual(os.path.exists(self.inner2_inner), True)

    def test__empty_directory_existing_dir(self):
        with unittest.mock.patch(
                "tool.utils.file_search.extract_directory_elements") as m:
            m.return_value = []
            _empty_directory(self.base)
            self.assertEqual(os.listdir(self.base), [])

    def test_empty_directory_multiple(self):
        with unittest.mock.patch(
                "tool.utils.file_search._empty_directory") as m:
            empty_directory([self.base, self.inner1])
            m.assert_has_calls([unittest.mock.call(self.base),
                                unittest.mock.call(self.inner1)])
            self.assertEqual(m.call_count, 2)

    def test_empty_directory_single(self):
        with unittest.mock.patch(
                "tool.utils.file_search._empty_directory") as m:
            empty_directory(self.base)
            m.assert_called_once_with(self.base)

    def test_create_directory(self):
        create_directory(self.to_create)
        self.assertEqual(os.path.exists(self.to_create), True)
