# -*- coding: utf-8 -*-
"""
Created on Tue Sep  1 09:28:13 2020

@author: David
"""
import unittest
from tool.utils.parameterize_utils import (
        parameterize, ParameterizedTestMeta, parameterize_directly,
        RepeatingTestCase
)
from tool.utils.args_parse import (
        create_parser, get_options_and_args, construct_options_dict,
        get_options_dict, vararg_callback, OptionParser, EXECUTION_ARGS,
        Values, CORRESPONDENCE
)


class TestArgParse(RepeatingTestCase, metaclass=ParameterizedTestMeta):
    def test_vararg_callback(self):
        parser = OptionParser()
        parser.add_option("--multi", action="callback",
                          dest="MULTI", callback=vararg_callback)
        option, args = parser.parse_args(["--multi", "one", "two",
                                          EXECUTION_ARGS[0], "four"])
        self.assertSequenceEqual([EXECUTION_ARGS[0], "four"], args)
        self.assertSequenceEqual(["one", "two"], option.MULTI)

    @parameterize(
        [{"a": 13, "b": 15, "c": "asd", "d": [1, 2, 3], "e": {"1": 2}}, {}],
         func_names=["normal", "empty_dict"]
    )
    def test_construct_options_dict_parameterized(self, d):
        vals = Values(d)
        self.assertDictEqual(d, construct_options_dict(vals))

    @parameterize_directly(
        [{"a": 13, "b": 15, "c": "asd", "d": [1, 2, 3], "e": {"1": 2}}, {}],
         func_names=["normal", "empty_dict"]
    )
    def test_construct_options_dict_parameterized2(self, d):
        vals = Values(d)
        self.assertDictEqual(d, construct_options_dict(vals))

    def test_construct_options_dict_repeated(self):
        expected = [
                {"a": 13, "b": 15, "c": "asd", "d": [1, 2, 3], "e": {"1": 2}},
                {}
        ]
        arg_values = [Values(d) for d in expected]
        msgs = ["Normal values", "Empty values"]

        self.repeat(construct_options_dict, arg_values, expected, msgs=msgs,
                    comparison=self.assertEqual)

    def test_construct_options_dict(self):
        dictionaries = [
                {"a": 13, "b": 15, "c": "asd", "d": [1, 2, 3], "e": {"1": 2}},
                {}
        ]
        for d in dictionaries:
            with self.subTest("empty dict" if d else "test_dict", d=d):
                vals = Values(d)
                self.assertDictEqual(d, construct_options_dict(vals))

    def test_get_options_dict_mocked(self):
        args = ["--data-path", "some/path", "--add-paths", "another/path",
                "some/other", "--delete-files"]
        p1 = unittest.mock.patch("tool.utils.args_parse.get_options_and_args",
                                 lambda *args: (Values(), tuple()))
        p2 = unittest.mock.patch("tool.utils.args_parse.construct_options_dict",
                                 lambda *args: dict())
        p1.start()
        p2.start()
        options = get_options_dict(args)
        p1.stop()
        p2.stop()
        for name in CORRESPONDENCE.values():
            with self.subTest("Checking {}".format(name), name=name):
                self.assertFalse(options[name])

    def test_get_options_dict(self):
        args = ["--data-path", "some/path", "--add-paths", "another/path",
                "some/other", "--delete-files"]
        options = get_options_dict(args)
        self.assertSequenceEqual(options["ADD_TO_PYTHON_PATH"],
                                 ["another/path", "some/other"])
        self.assertEqual(options["BASE_DATA_PATH"], "some/path")
        self.assertTrue(options["DELETE_FILES_AT_START"])
        for name in CORRESPONDENCE.values():
            with self.subTest("Checking {}".format(name), name=name):
                self.assertFalse(options[name])
