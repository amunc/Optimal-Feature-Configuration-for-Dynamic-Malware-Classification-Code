# -*- coding: utf-8 -*-
"""
Created on Thu Sep  3 11:46:12 2020

@author: David
"""
import unittest
import unittest.mock
import logging
from tool.utils.logging import (
    load_log_config, FilterByName
)
from tool.utils.parameterize_utils import parameterize_directly

class TestLogging(unittest.TestCase):
    def test_load_log_config(self):
        settings = {
            "version": 1,
            "disable_existing_loggers" : False,
            "formatters": {
                "full_formatter": {
                    "format": "[%(asctime)s]: %(name)s %(levelname)s %(message)s",
                    "datefmt": "%d-%m-%Y %H:%M:%S"
                }
            },
            "handlers": {
                "console": {
                    "class": "logging.StreamHandler",
                    "level": "DEBUG",
                    "formatter": "full_formatter",
                    "stream": "ext://sys.stdout"
                },
            },
            "root": {
                "level": "DEBUG",
                "handlers": ["console"]
            }
        }
        with unittest.mock.patch("logging.config.dictConfig") as m:
            load_log_config(settings)
            m.assert_called_once_with(settings)

    @parameterize_directly(
        [("sample", "in_sample"), ("sample", "no")]
    )
    def test_FilterByName(self, filtered_name, name):
        filt = FilterByName(filtered_name)
        record = logging.LogRecord(
            name, logging.DEBUG, "", 12, "", tuple(), None)

        self.assertEqual(filt.filter(record), filtered_name in name)
